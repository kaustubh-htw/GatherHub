AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for GatherHub static website with authentication, notification, and storage'

Resources:
  # S3 Bucket for static website hosting
  GatherHubWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-website'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration: # Allow public access
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # Bucket policy to allow public read access
  GatherHubWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GatherHubWebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join ['', ['arn:aws:s3:::', !Ref GatherHubWebsiteBucket, '/*']]


  # Cognito User Pool for authentication
  GatherHubUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AWS::StackName}-user-pool'
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  # Cognito User Pool Client
  GatherHubUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AWS::StackName}-client'
      UserPoolId: !Ref GatherHubUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # SNS Topic for user notifications
  GatherHubNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-notifications'

  # DynamoDB Table for storage
  GatherHubStorageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-storage'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  GatherHubEventCreationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-event-creation'
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid

          dynamodb = boto3.resource('dynamodb')
          table_name = '${GatherHubStorageTable}'
          table = dynamodb.Table(table_name)

          def lambda_handler(event, context):
              try:
                  # Parse the event details
                  event_details = json.loads(event['body'])
                  event_id = str(uuid.uuid4())  # Generate unique ID
                  
                  # Prepare the item
                  item = {
                      'id': event_id,
                      'name': event_details['name'],
                      'description': event_details['description'],
                      'date': event_details['date'],
                      'location': event_details['location']
                  }

                  # Store the event in DynamoDB
                  table.put_item(Item=item)

                  # Return success response
                  return {
                      'statusCode': 200,
                      'body': json.dumps({'message': 'Event created successfully!', 'eventId': event_id})
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'message': 'Error creating event', 'error': str(e)})
                  }

      Role: !GetAtt GatherHubLambdaExecutionRole.Arn

  GatherHubLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DescribeTable
                Resource: !GetAtt GatherHubStorageTable.Arn


Outputs:
  GatherHubWebsiteURL:
    Description: 'URL for the static website'
    Value: !GetAtt GatherHubWebsiteBucket.WebsiteURL
  GatherHubUserPoolId:
    Description: 'ID of the Cognito User Pool'
    Value: !Ref GatherHubUserPool
  GatherHubUserPoolClientId:
    Description: 'ID of the Cognito User Pool Client'
    Value: !Ref GatherHubUserPoolClient
  GatherHubNotificationTopicArn:
    Description: 'ARN of the SNS Topic'
    Value: !Ref GatherHubNotificationTopic
  GatherHubDynamoDBTableName:
    Description: 'Name of the DynamoDB Table'
    Value: !Ref GatherHubStorageTable
